name: Automated build
env:
  CI_INTERMEDIATES_DIR: "_ci-intermediates"
on:
  # release:
  #   types: [created]
  push:
    branches:
      - "actions"
    # tags:
    #   - 'v*'

jobs:
  build:
    name: ${{ matrix.job.os }} (${{ matrix.job.target }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          # - {os: ubuntu-20.04, target: arm-unknown-linux-gnueabihf,   use-cross: true}
          # - {os: ubuntu-20.04, target: arm-unknown-linux-musleabihf,  use-cross: true}
          # - {os: ubuntu-20.04, target: aarch64-unknown-linux-gnu,     use-cross: true}
          - {os: ubuntu-20.04, target: aarch64-unknown-linux-musl, use-cross: true}
          # - {os: ubuntu-20.04, target: x86_64-unknown-linux-musl,   use-cross: true}
          # - {os: ubuntu-20.04, target: x86_64-unknown-linux-gnu}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      # - name: Avoiding run when diesel
      #   shell: bash
      #   run: |
      #     database=$(cat Cargo.toml | grep '^default' | awk '{print $3}' | grep 'db' | tr -d '",[]' )
      #     if [ "$database" == "db_diesel" ]; then
      #       exit 1
      #     elif [ "$database" == "db" ]; then
      #       exit 1
      #     fi

      - name: Install prerequisites
        shell: bash
        run: |
          case ${{ matrix.job.target }} in
            aarch64-unknown-linux-musl)
              sudo apt-get update ;
              sudo apt-get --assume-yes install libssl-dev libpq-dev
              ;;
          esac

      - name: Extract crate information
        shell: bash
        run: |
          echo "PROJECT_NAME=$(sed -n 's/^name = "\(.*\)"/\1/p' Cargo.toml | head -n1)" >> $GITHUB_ENV
          echo "PROJECT_VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' Cargo.toml | head -n1)" >> $GITHUB_ENV
          echo "PROJECT_HOMEPAGE=$(sed -n 's/^homepage = "\(.*\)"/\1/p' Cargo.toml)" >> $GITHUB_ENV

      # - name: Install Rust toolchain
      #   uses: actions-rs/toolchain@v1
      #   with:
      #     # toolchain: stable
      #     toolchain: nightly # ?? needed by cross | sqlx ??
      #     target: ${{ matrix.job.target }}
      #     override: true
      #     profile: minimal # minimal component installation (ie, no documentation)

      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: build
          target: ${{ matrix.job.target }}
          args: "--locked --release +nightly"
          strip: true

      # - name: Build
      #   uses: actions-rs/cargo@v1
      #   with:
      #     use-cross: ${{ matrix.job.use-cross }}
      #     command: build
      #     args: --locked --release --target=${{ matrix.job.target }}
